<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Sudoku</title>
  <style>
    :root {
      --bg-color: #f4f4f4;
      --text-color: #000;
      --cell-bg: #fff;
      --selected-cell: #b3d9ff;
      --incorrect-cell: #ffb3b3;
    }
    .dark {
      --bg-color: #1e1e1e;
      --text-color: #fff;
      --cell-bg: #2b2b2b;
      --selected-cell: #0050a0;
      --incorrect-cell: #a00000;
    }
    * { box-sizing: border-box; }
    body {
      font-family: sans-serif;
      background: var(--bg-color);
      color: var(--text-color);
      margin: 0;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .controls {
      margin-bottom: 20px;
    }
    .main {
      display: flex;
      gap: 40px;
    }
    .board {
      display: grid;
      grid-template-columns: repeat(9, 80px);
      grid-template-rows: repeat(9, 80px);
      border: 4px solid black;
      margin-top: 40px;
    }
    .cell {
      width: 80px;
      height: 80px;
      border: 1px solid #999;
      text-align: center;
      line-height: 80px;
      font-size: 24px;
      font-weight: bold;
      background-color: var(--cell-bg);
      color: var(--text-color);
      cursor: pointer;
    }
    .cell.selected {
      background-color: var(--selected-cell);
    }
    .cell.incorrect {
      background-color: var(--incorrect-cell);
    }
    .cell.thick-top { border-top: 3px solid black; }
    .cell.thick-left { border-left: 3px solid black; }
    .cell.thick-bottom { border-bottom: 3px solid black; }
    .cell.thick-right { border-right: 3px solid black; }

    .numbers {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 40px;
    }
    .numbers-row {
      display: flex;
    }
    .numbers button {
      width: 70px;
      height: 70px;
      font-size: 22px;
      margin: 5px;
    }
    .info {
      margin-top: 20px;
      font-size: 24px;
    }
    .lang-select {
      margin-left: 10px;
    }
    #mistakes {
      font-size: 36px;
      font-weight: bold;
      color: red;
    }
  </style>
</head>
<body>
  <div class="controls">
    <select id="difficulty">
      <option value="easy">Easy</option>
      <option value="medium">Medium</option>
      <option value="hard">Hard</option>
    </select>
    <button id="themeToggle" onclick="toggleDarkMode()">üåô</button>
    <select id="language" class="lang-select" onchange="setLanguage(this.value)">
      <option value="en">English</option>
      <option value="pl">Polski</option>
      <option value="fr">Fran√ßais</option>
      <option value="es">Espa√±ol</option>
      <option value="it">Italiano</option>
      <option value="ru">–†—É—Å—Å–∫–∏–π</option>
    </select>
  </div>

  <div class="main">
    <div class="board" id="board"></div>

    <div class="numbers">
      <div class="numbers-row">
        <button onclick="placeNumber(1)">1</button>
        <button onclick="placeNumber(2)">2</button>
        <button onclick="placeNumber(3)">3</button>
      </div>
      <div class="numbers-row">
        <button onclick="placeNumber(4)">4</button>
        <button onclick="placeNumber(5)">5</button>
        <button onclick="placeNumber(6)">6</button>
      </div>
      <div class="numbers-row">
        <button onclick="placeNumber(7)">7</button>
        <button onclick="placeNumber(8)">8</button>
        <button onclick="placeNumber(9)">9</button>
      </div>
      <div class="info">
        <p id="mistakes">Mistakes: 0/3</p>
        <p id="timer">Time: 0s</p>
        <p id="status"></p>
      </div>
    </div>
  </div>

  <script>
    const boardElement = document.getElementById("board");
    let selectedCell = null;
    let mistakes = 0;
    let timer = 0;
    let timerInterval = null;

    function updateTimer() {
      timer++;
      document.getElementById("timer").textContent = `Time: ${timer}s`;
    }

    function startTimer() {
      timer = 0;
      if (timerInterval) clearInterval(timerInterval);
      timerInterval = setInterval(updateTimer, 1000);
    }

    function addMistake() {
      mistakes++;
      document.getElementById("mistakes").textContent = `Mistakes: ${mistakes}/3`;
      if (mistakes >= 3) {
        document.getElementById("status").textContent = "Game over! New board in 1s...";
        setTimeout(() => generateBoard(), 1000);
      }
    }

    function generateBoard() {
      try {
        boardElement.innerHTML = "";
        mistakes = 0;
        document.getElementById("mistakes").textContent = `Mistakes: 0/3`;
        document.getElementById("status").textContent = "";
        startTimer();

        const puzzle = [
          [5, 3, '', '', 7, '', '', '', ''],
          [6, '', '', 1, 9, 5, '', '', ''],
          ['', 9, 8, '', '', '', '', 6, ''],
          [8, '', '', '', 6, '', '', '', 3],
          [4, '', '', 8, '', 3, '', '', 1],
          [7, '', '', '', 2, '', '', '', 6],
          ['', 6, '', '', '', '', 2, 8, ''],
          ['', '', '', 4, 1, 9, '', '', 5],
          ['', '', '', '', 8, '', '', 7, 9],
        ];
        const solution = [
          [5,3,4,6,7,8,9,1,2],
          [6,7,2,1,9,5,3,4,8],
          [1,9,8,3,4,2,5,6,7],
          [8,5,9,7,6,1,4,2,3],
          [4,2,6,8,5,3,7,9,1],
          [7,1,3,9,2,4,8,5,6],
          [9,6,1,5,3,7,2,8,4],
          [2,8,7,4,1,9,6,3,5],
          [3,4,5,2,8,6,1,7,9],
        ];

        for (let i = 0; i < 9; i++) {
          for (let j = 0; j < 9; j++) {
            const cell = document.createElement("div");
            cell.className = "cell";
            if (i % 3 === 0) cell.classList.add("thick-top");
            if (j % 3 === 0) cell.classList.add("thick-left");
            if ((i + 1) % 3 === 0) cell.classList.add("thick-bottom");
            if ((j + 1) % 3 === 0) cell.classList.add("thick-right");
            cell.dataset.correct = solution[i][j];
            if (puzzle[i][j]) {
              cell.textContent = puzzle[i][j];
              cell.style.pointerEvents = "none";
            }
            cell.addEventListener("click", () => {
              if (selectedCell) selectedCell.classList.remove("selected");
              selectedCell = cell;
              cell.classList.add("selected");
            });
            boardElement.appendChild(cell);
          }
        }
      } catch (err) {
        console.error("Error generating board:", err);
      }
    }

    function placeNumber(num) {
      if (!selectedCell || selectedCell.textContent !== "") return;
      if (selectedCell.dataset.correct == num) {
        selectedCell.textContent = num;
        selectedCell.classList.remove("incorrect");
      } else {
        selectedCell.classList.add("incorrect");
        addMistake();
      }
    }

    function toggleDarkMode() {
      document.body.classList.toggle("dark");
    }

    function setLanguage(lang) {
      localStorage.setItem("sudokuLang", lang);
    }

    window.addEventListener("DOMContentLoaded", () => {
      const savedLang = localStorage.getItem("sudokuLang") || "en";
      document.getElementById("language").value = savedLang;
      setLanguage(savedLang);
      generateBoard();
    });
  </script>
</body>
</html>
